{"version":3,"sources":["Game/Game.module.css","Game/Buttons/Buttons.module.css","App.module.css","Game/Buttons/IncreaseButton.jsx","Game/Buttons/Reset.jsx","Game/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","theGame_wrapper","display","buttons_wrapper","maxNumber","buttonPut","nonactive","App","IncreaseButton","render","clickPlusOne","_this","props","disabled","number","react_default","a","createElement","ref","buttonIncrease","onClick","className","style","React","Component","ResetButton","clickReset","Game","num","maxNumberClass","concat","Buttons_IncreaseButton","Reset","createRef","state","setState","src_Game_Game","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8EACAA,EAAAC,QAAA,CAAkBC,gBAAA,8BAAAC,QAAA,sBAAAC,gBAAA,8BAAAC,UAAA,0CCAlBL,EAAAC,QAAA,CAAkBK,UAAA,2BAAAC,UAAA,+CCAlBP,EAAAC,QAAA,CAAkBO,IAAA,sOCkBHC,6MAdXC,OAAS,WAEL,IAAIC,EAAeC,EAAKC,MAAMF,aAE1BG,EADMF,EAAKC,MAAME,QACC,EAAI,WAAa,GAGvC,OACIC,EAAAC,EAAAC,cAAA,UAAQC,IAAKP,EAAKC,MAAMO,eAAgBC,QAASV,EAAcW,UAAWC,IAAMjB,UAAWQ,SAAUA,GAArG,qCAViBU,IAAMC,WCepBC,6MAbXhB,OAAS,WAEL,IAAIiB,EAAaf,EAAKC,MAAMc,WAExBb,EADMF,EAAKC,MAAME,OACA,EAAI,GAAK,WAE9B,OACIC,EAAAC,EAAAC,cAAA,UAAQI,UAAWC,IAAMjB,UAAY,IAAMiB,IAAMhB,UAAWc,QAASM,EAAYb,SAAUA,GAA3F,uCATcU,IAAMC,WCsBjBG,6MAnBXlB,OAAS,WAEL,IAAImB,EAAMjB,EAAKC,MAAME,OACjBe,EAAyB,IAARD,EAAA,GAAAE,OAAeR,IAAMpB,QAArB,KAAA4B,OAAgCR,IAAMlB,WAAtC,GAAA0B,OAAuDR,IAAMpB,SAGlF,OACIa,EAAAC,EAAAC,cAAA,OAAKI,UAAWC,IAAMrB,iBAClBc,EAAAC,EAAAC,cAAA,OAAKI,UAAWQ,GACZd,EAAAC,EAAAC,cAAA,YAAOW,IAEXb,EAAAC,EAAAC,cAAA,OAAKI,UAAWC,IAAMnB,iBAClBY,EAAAC,EAAAC,cAACc,EAAD,CAAgBZ,eAAgBR,EAAKC,MAAMO,eAAgBT,aAAcC,EAAKC,MAAMF,aAAcI,OAAQH,EAAKC,MAAME,SACrHC,EAAAC,EAAAC,cAACe,EAAD,CAAaN,WAAYf,EAAKC,MAAMc,WAAYZ,OAAQH,EAAKC,MAAME,yCAdpES,IAAMC,WCqCVjB,6MAnCXY,eAAiBI,IAAMU,cAGvBC,MAAQ,CACJpB,OAAQ,KAGZJ,aAAe,WACXC,EAAKwB,SAAS,CACVrB,OAAQH,EAAKuB,MAAMpB,OAAS,OAIpCY,WAAa,WACTf,EAAKwB,SAAS,CACVrB,OAAQ,OAKhBL,OAAS,WAEL,OACGM,EAAAC,EAAAC,cAAA,OAAKI,UAAWC,IAAMf,KAClBQ,EAAAC,EAAAC,cAACmB,EAAD,CACItB,OAAQH,EAAKuB,MAAMpB,OACnBK,eAAgBR,EAAKQ,eACrBT,aAAcC,EAAKD,aACnBgB,WAAYf,EAAKe,4CA9BlBH,IAAMC,WCOJa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASjC,OAAOM,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d3517e3d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"theGame_wrapper\":\"Game_theGame_wrapper__dV00L\",\"display\":\"Game_display__2vwau\",\"buttons_wrapper\":\"Game_buttons_wrapper__3ulqn\",\"maxNumber\":\"Game_maxNumber__3syXK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonPut\":\"Buttons_buttonPut__3tqGS\",\"nonactive\":\"Buttons_nonactive__2UMBn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1BR3V\"};","import React from 'react';\r\nimport style from './Buttons.module.css';\r\n\r\nclass IncreaseButton extends React.Component {\r\n\r\n    render = () => {\r\n\r\n        let clickPlusOne = this.props.clickPlusOne\r\n        let num = this.props.number\r\n        let disabled = num >= 5 ? 'disabled' : ''\r\n\r\n\r\n        return (\r\n            <button ref={this.props.buttonIncrease} onClick={clickPlusOne} className={style.buttonPut} disabled={disabled}>\r\n                inc\r\n            </button>\r\n        );\r\n    }\r\n}\r\nexport default IncreaseButton;","import React from 'react';\r\nimport style from './Buttons.module.css';\r\n\r\nclass ResetButton extends React.Component {\r\n\r\n    render = () => {\r\n\r\n        let clickReset = this.props.clickReset\r\n        let num = this.props.number\r\n        let disabled = num > 0 ? '' : 'disabled'\r\n\r\n        return (\r\n            <button className={style.buttonPut + ' ' + style.nonactive} onClick={clickReset} disabled={disabled}>\r\n                reset\r\n            </button>\r\n        );\r\n    }\r\n}\r\nexport default ResetButton;","import React from 'react';\r\nimport style from './Game.module.css';\r\nimport IncreaseButton from \"./Buttons/IncreaseButton\";\r\nimport ResetButton from \"./Buttons/Reset\";\r\n\r\nclass Game extends React.Component {\r\n    render = () => {\r\n\r\n        let num = this.props.number\r\n        let maxNumberClass = num === 5 ? `${style.display} ${style.maxNumber}` : `${style.display}`\r\n\r\n\r\n        return (\r\n            <div className={style.theGame_wrapper}>\r\n                <div className={maxNumberClass}>\r\n                    <span>{num}</span>\r\n                </div>\r\n                <div className={style.buttons_wrapper}>\r\n                    <IncreaseButton buttonIncrease={this.props.buttonIncrease} clickPlusOne={this.props.clickPlusOne} number={this.props.number} />\r\n                    <ResetButton clickReset={this.props.clickReset} number={this.props.number} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Game;","import React from 'react';\nimport style from './App.module.css';\n\nimport Game from \"./Game/Game\";\n\nclass App extends React.Component {\n\n    buttonIncrease = React.createRef();\n\n\n    state = {\n        number: 0,\n    };\n\n    clickPlusOne = () => {\n        this.setState({\n            number: this.state.number + 1\n        })\n    }\n\n    clickReset = () => {\n        this.setState({\n            number: 0\n        })\n    }\n\n\n    render = () => {\n\n        return (\n           <div className={style.App}>\n               <Game\n                   number={this.state.number}\n                   buttonIncrease={this.buttonIncrease}\n                   clickPlusOne={this.clickPlusOne}\n                   clickReset={this.clickReset}\n               />\n           </div>\n        );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}